{"version":3,"sources":["components/input.js","containers/resultIntegral.js","components/result.js","reducer/PostReducer.js","components/help.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","formula","a","b","accuracy","handleChangeFormula","event","setState","target","value","handleChangeA","handleChangeB","handleChangeAccuracy","handleSubmit","preventDefault","axios","post","then","res","props","dispatch","type","integral","data","onSubmit","this","className","id","htmlFor","onChange","name","React","Component","connect","ResultIntegral","undefined","result","nums","error","showResult","showNums","showError","console","log","Result","postReducer","action","length","pop","concat","Help","handleOnClick","p","document","getElementById","div","style","innerHTML","img","createElement","src","onclick","handleOnSmallClick","appendChild","removeChild","onClick","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5dc89b83.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/input.css';\r\nimport store from '../App';\r\nimport {connect} from 'react-redux'\r\n\r\nclass Input extends React.Component{\r\n\r\n    state = {\r\n        formula:'',\r\n        a:0,\r\n        b:0,\r\n        accuracy:0\r\n    }\r\n\r\n    handleChangeFormula = event => {\r\n        this.setState({formula: event.target.value});\r\n    }\r\n\r\n    handleChangeA = event => {\r\n        this.setState({a: event.target.value});\r\n    }\r\n\r\n    handleChangeB = event => {\r\n        this.setState({b: event.target.value});\r\n    }\r\n\r\n    handleChangeAccuracy = event => {\r\n        this.setState({accuracy: event.target.value});\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        axios.post('http://localhost:8080/integration', {\r\n            formula:this.state.formula,\r\n            a:this.state.a,\r\n            b:this.state.b,\r\n            accuracy:this.state.accuracy\r\n        })\r\n            .then(res => {\r\n                this.props.dispatch({\r\n                    type: 'ADD_RESULT',\r\n                    integral: res.data\r\n                });\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label className=\"label\" id=\"formula\" htmlFor=\"formula\">Формула</label>\r\n                    <br/>\r\n                    <input type=\"text\" id=\"inputFormula\" onChange={this.handleChangeFormula} name=\"formula\"/>\r\n                    <p id=\"p\">Границы интегрирования</p>\r\n                    <div>\r\n                        <label className=\"label\" id=\"a\" htmlFor=\"a\">a</label>\r\n                        <input type=\"text\" id=\"inputA\" onChange={this.handleChangeA} name=\"a\"/>\r\n                        <label className=\"label\" id=\"b\" htmlFor=\"b\">b</label>\r\n                        <input type=\"text\" id=\"inputB\" onChange={this.handleChangeB} name=\"b\"/>\r\n                    </div>\r\n                    <label className=\"label\" id=\"accuracy\" htmlFor=\"accuracy\">Точность</label>\r\n                    <input type=\"text\"  id=\"inputAccuracy\" onChange={this.handleChangeAccuracy} name=\"accuracy\"/>\r\n                    <br/>\r\n                    <button id=\"send\"  type=\"submit\">Узнать ответ</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect() (Input);\r\n","import React from \"react\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from 'react-redux';\r\n\r\nclass ResultIntegral extends React.Component {\r\n\r\n    showResult() {\r\n        if (this.props.integral != undefined) {\r\n            return this.props.integral[0].result;\r\n        }\r\n    }\r\n\r\n    showNums(){\r\n        if (this.props.integral != undefined){\r\n            return this.props.integral[0].nums;\r\n        }\r\n    }\r\n\r\n    showError(){\r\n        if (this.props.integral != undefined){\r\n            return this.props.integral[0].error\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Ответ: {this.showResult()}</p>\r\n                <p>Количество делений функции: {this.showNums()} </p>\r\n                <p>Погрешность: {this.showError()}</p>\r\n                {console.log(this.props.integral)}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        integral: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (ResultIntegral);\r\n","import React from \"react\";\r\nimport \"../styles/result.css\";\r\nimport ResultIntegral from \"../containers/resultIntegral\"\r\n\r\nclass Result extends React.Component{\r\n    render() {\r\n        return(\r\n            <div>\r\n                <p id=\"pResult\">Результат</p>\r\n                <ResultIntegral/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;\r\n","const postReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'ADD_RESULT':\r\n            if (state.length != 0){\r\n                state.pop();\r\n            }\r\n            return state.concat([action.integral]);\r\n    }\r\n}\r\n\r\nexport default postReducer;\r\n","import React from \"react\";\r\nimport \"../styles/help.css\";\r\n\r\nclass Help extends React.Component{\r\n\r\n    handleOnClick = (event) =>{\r\n        let p = document.getElementById(\"helps\");\r\n        let div = document.getElementById(\"help\");\r\n        div.style = \"border: 1px solid black; border-radius: 20px\";\r\n        p.innerHTML = \" При вводе формулы не нужны пробелы, пишите всё подряд, x*x+2, допустимые знаки, + - * / sin(x) cos(x) tg(x) ()\";\r\n        let img = document.createElement(\"img\");\r\n        img.id = \"picture\";\r\n        img.src = \"https://c7.hotpng.com/preview/313/595/595/x-mark-check-mark-cross-sign-clip-art-x-mark.jpg\";\r\n        img.style = \"width:20px;height:20px\";\r\n        img.onclick = this.handleOnSmallClick;\r\n        div.appendChild(img);\r\n    }\r\n\r\n    handleOnSmallClick = (event) => {\r\n        let p = document.getElementById(\"helps\");\r\n        let div = document.getElementById(\"help\");\r\n        let img = document.getElementById(\"picture\");\r\n        div.style = \"\";\r\n        p.innerHTML=\"\";\r\n        div.removeChild(img);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <img onClick={this.handleOnClick} src=\"https://www.prikol.ru/wp-content/uploads/2015/04/vopr.jpg\"/>\r\n                <div id=\"help\">\r\n                    <p id=\"helps\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Help;\r\n","import React from 'react';\nimport './App.css';\nimport Input from \"./components/input\";\nimport Result from \"./components/result\";\nimport {createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport postReducer from './reducer/PostReducer';\nimport Help from \"./components/help\";\n\nconst store = createStore(postReducer);\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <Provider store={store}>\n              <div className=\"Block\">\n                  <Input/>\n              </div>\n              <div className=\"Block2\">\n                  <Result/>\n              </div>\n              <div>\n                  <Help/>\n              </div>\n          </Provider>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}